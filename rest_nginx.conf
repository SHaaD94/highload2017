worker_processes  1;
worker_rlimit_nofile 500000;

timer_resolution 100ms;
worker_priority -10;

events {
  worker_connections  1024;
  use epoll;
  multi_accept on;
}

http {
  charset                      utf-8;
  client_body_buffer_size      2048;
  client_max_body_size         4096;
  client_header_buffer_size    512;
  large_client_header_buffers  4 1k;
  output_buffers               1 512;
  postpone_output              1460;

  keepalive_timeout 10;
  keepalive_requests 10;
  reset_timedout_connection on;
  client_body_timeout 10;
  send_timeout 60s;

  default_type  "application/json; charset=utf-8";

  access_log off;

  sendfile       on;
  tcp_nopush     on;
  tcp_nodelay    on;

  upstream backend {
    # Tarantool hosts
    server 127.0.0.1:3310;

    keepalive 30000;
  }

  server {
    listen       80;
    server_name  127.0.0.1;

    #autoindex   off;

    proxy_buffering         off;
    proxy_buffer_size       512;
    chunked_transfer_encoding off;

    tnt_pass_http_request on parse_args pass_body unescape;
    tnt_pure_result on;
    tnt_http_methods all;
    tnt_buffer_size 1024;
    tnt_pass_http_request_buffer_size 4048;

    lua_need_request_body on;

    proxy_http_version 1.1;
    proxy_set_header Connection "";
    #-----------------------------------------users
    location = /users {
      internal;
      tnt_http_rest_methods get post;
      tnt_method userEndpoint;
      tnt_pass backend;
    }

    location = /users/new {
        rewrite_by_lua_block {
          local cjson = require("cjson")
          local data = ngx.req.get_body_data()
          local res = ngx.location.capture('/users',{ method = ngx.HTTP_POST, body = data})
          local answ = cjson.decode(res.body)
          if answ[1]==200 then
            ngx.say(cjson.encode(answ[2]))
          else
            ngx.exit(answ[1])
          end
        }
    }

    location ~ /users/(\d+) {
      if ($request_method = "GET") {
        rewrite_by_lua_block {
          local cjson = require("cjson")
          local res = ngx.location.capture('/users',{args = ngx.var.args, method = ngx.HTTP_GET})
          local answ = cjson.decode(res.body)
          if answ[1]==200 then
              local result = cjson.encode(answ[2])
              result = result:gsub("{}", "[]")
              ngx.say(result)
          else
              ngx.exit(answ[1])
          end
        }
      }
      if ($request_method = "POST") {
        rewrite_by_lua_block {
        local cjson = require("cjson")
        local data = ngx.req.get_body_data()
        local res = ngx.location.capture('/users',{ method = ngx.HTTP_POST, body = data})
        local answ = cjson.decode(res.body)
            if answ[1]==200 then
        ngx.say(cjson.encode(answ[2]))
        else
            ngx.exit(answ[1])
        end
      }
    }
  }

#-----------------------------------------visits
    location = /visits {
      internal;
      tnt_http_rest_methods get post;
      tnt_method visitEndpoint;
      tnt_pass backend;
    }

    location = /visits/new {
        rewrite_by_lua_block {
          local cjson = require("cjson")
          local data = ngx.req.get_body_data()
          local res = ngx.location.capture('/visits',{ method = ngx.HTTP_POST, body = data})
          local answ = cjson.decode(res.body)
          if answ[1]==200 then
            ngx.say(cjson.encode(answ[2]))
          else
            ngx.exit(answ[1])
          end
        }
    }

    location ~ /visits/(\d+) {
      if ($request_method = "GET") {
        rewrite_by_lua_block {
          local cjson = require("cjson")
          local res = ngx.location.capture('/visits')
          local answ = cjson.decode(res.body)
          if answ[1]==200 then
              ngx.say(cjson.encode(answ[2]))
          else
              ngx.exit(answ[1])
          end
        }
      }
      if ($request_method = "POST") {
        rewrite_by_lua_block {
        local cjson = require("cjson")
        local data = ngx.req.get_body_data()
        local res = ngx.location.capture('/visits',{ method = ngx.HTTP_POST, body = data})
        local answ = cjson.decode(res.body)
            if answ[1]==200 then
        ngx.say(cjson.encode(answ[2]))
        else
            ngx.exit(answ[1])
        end
      }
    }
  }

#-----------------------------------------locations
    location = /locations {
      internal;
      tnt_http_rest_methods get post;
      tnt_method locationEndpoint;
      tnt_pass backend;
    }

    location = /locations/new {
        rewrite_by_lua_block {
          local cjson = require("cjson")
          local data = ngx.req.get_body_data()
          local res = ngx.location.capture('/locations',{ method = ngx.HTTP_POST, body = data})
          local answ = cjson.decode(res.body)
          if answ[1]==200 then
            ngx.say(cjson.encode(answ[2]))
          else
            ngx.exit(answ[1])
          end
        }
    }

    location ~ /locations/(\d+) {
      if ($request_method = "GET") {
        rewrite_by_lua_block {
          local cjson = require("cjson")
          local res = ngx.location.capture('/locations')
          local answ = cjson.decode(res.body)
          if answ[1]==200 then
              ngx.say(cjson.encode(answ[2]))
          else
              ngx.exit(answ[1])
          end
        }
      }
      if ($request_method = "POST") {
        rewrite_by_lua_block {
        local cjson = require("cjson")
        local data = ngx.req.get_body_data()
        local res = ngx.location.capture('/locations',{ method = ngx.HTTP_POST, body = data})
        local answ = cjson.decode(res.body)
            if answ[1]==200 then
        ngx.say(cjson.encode(answ[2]))
        else
            ngx.exit(answ[1])
        end
      }
    }
  }
 }
}