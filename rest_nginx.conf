worker_processes  1;
worker_rlimit_nofile 500000;

timer_resolution 100ms;
worker_priority -10;

events {
  worker_connections  1024;
  use epoll;
  multi_accept on;
}

http {
  client_body_buffer_size      128;
  client_max_body_size         256;
  client_header_buffer_size    512;
  large_client_header_buffers  4 1k;
  output_buffers               1 512;
  postpone_output              1460;

  gzip on;
  gzip_min_length 1000;
  gzip_types application/json;

  keepalive_timeout 30;
  keepalive_requests 1000000;
  reset_timedout_connection on;
  client_body_timeout 10;
  send_timeout 60s;

  default_type  application/json;

  #access_log off;

  sendfile       on;
  tcp_nopush     on;
  tcp_nodelay    on;

  upstream backend {
    # Tarantool hosts
    server 127.0.0.1:3310;

    keepalive 30000;
  }

  server {
    listen       80;
    server_name  127.0.0.1;

    #autoindex   off;

    proxy_buffering         off;
    proxy_buffer_size       512;

    tnt_pass_http_request on parse_args pass_body pass_headers_out;
    tnt_pure_result on;
    tnt_http_methods all;
    tnt_buffer_size 1024;
    tnt_pass_http_request_buffer_size 1024;

    lua_need_request_body on;

    proxy_http_version 1.1;
    proxy_set_header Connection "";

    location = /users {
      internal;
      tnt_http_rest_methods get post;
      tnt_method userEndpoint;
      tnt_pass backend;
    }

    location ~ /users/(\d+) {
      if ($request_method = "GET") {
        rewrite_by_lua_block {
          local cjson = require("cjson")
          local res = ngx.location.capture('/users')
          local answ = cjson.decode(res.body)
          if answ[1]==200 then
              ngx.say(cjson.encode(answ[2]))
          else
              ngx.exit(answ[1])
          end
        }
      }
      if ($request_method = "POST") {
        rewrite_by_lua_block {
          local cjson = require("cjson")
          --ngx.req.read_body()
          local data = ngx.req.get_body_data()
          local res = ngx.location.capture('/users',{ method = ngx.HTTP_POST, body = data})
        local answ = cjson.decode(res.body)
            if answ[1]==200 then
        ngx.say(cjson.encode(answ[2]))
        else
            ngx.exit(answ[1])
        end
      }
    }
  }
 }
}